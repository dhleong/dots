#!/bin/bash

path="."
if [ $# -ge 1 ]
then
    path=$1
fi

function filter_ignored() {
    rg -v '/(node_modules|cljs-runtime|target|nashorn_code_cache|Pods|.expo)'
}

function files_from_git() {
    cd $path

    # NOTE: Printing directly with --format gives like a ~100x speedup
    # (~4.5s -> 0.04s) over the the old approach (see git history)
    git ls-tree -r HEAD \
        --format="$path/%(path)" \
        2> /dev/null
    if [[ $? -ne 0 ]]; then
        # Not a git repo
        return 1
    fi

    # Also find untracked (but not ignored) files
    # We can't use --format here (it conflicts with --others) but the number
    # of files here is typically very small, so nbd. This command is itself
    # somewhat slow, unfortunately, so the read loop may not matter
    git ls-files --others --exclude-standard | while read -r line; do
        echo "$path/$line"
    done
}

function find_files() {
    # fallback if it's not a git repo
    find $path -path "*/\.*" -prune -o -type f -print -o -type l -print
}

(
    files_from_git \
        || find_files
) | filter_ignored
